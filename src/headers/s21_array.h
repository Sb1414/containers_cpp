#ifndef CONTAINERS_S21_ARRAY_H
#define CONTAINERS_S21_ARRAY_H

#include <initializer_list>

// Первая строка определяет пространство имен (namespace) с именем "s21"
namespace s21 {
template <typename T, std::size_t V>
// Далее объявляется шаблонный класс с именем "array". Он принимает два 
// параметра - тип данных элементов массива (T) и некоторый размер (V), который должен быть
// представлен как константное выражение std::size_t
class array {
 public:
  // Затем объявлены несколько типов, используемых в классе: value_type, 
  // reference, const_reference, iterator, const_iterator и size_type. 
  // Эти типы определены через используемые типы (using), чтобы указать на тип 
  // данных элементов, ссылки на элементы, указатели на элементы и размер
  using value_type = T;
  using reference = T &;
  using const_reference = const T &;
  using iterator = T *;
  using const_iterator = const T *;
  using size_type = std::size_t;

  // В приватной секции класса объявляется массив с именем data_, который 
  // может хранить V элементов типа T. Здесь "value_type" обозначает тип T, 
  // который был указан ранее
 private:
  value_type data_[V];

  // В публичной секции класса определен конструктор по умолчанию, который 
  // вызывается, если пользователь не предоставляет аргументов во время создания 
  // экземпляра класса. Он помечен как noexcept, что позволяет компилятору оптимизировать 
  // код при работе с этим конструктором. "default" указывает на использование значения по 
  // умолчанию для конструктора
 public:
  array() noexcept = default;

  // Ключевое слово `explicit` указывает на явное использование конструктора, то есть он должен быть вызван явно 
  // при создании объекта, а не неявно при передаче аргументов функции
  // Объявление конструктора класса `array`, который принимает список инициализации типа `value_type`
  explicit array(std::initializer_list<value_type> const &items) {
  // проверка, что количество элементов в списке инициализации не превышает размер массива `V`. 
  // Если превышает, то выбрасывается исключение типа `std::logic_error` с сообщением "too many initializers"
    if (items.size() > V) {
      throw std::logic_error("too many initializers");
    }
  // Заполнение массива `data_` элементами из списка инициализации `items`. 
  // Используется цикл от 0 до `V`, который поочередно присваивает элементам массива 
  // значения из списка инициализации, используя оператор индексации `[]`
    for (size_type i = 0; i < V; ++i) {
      data_[i] = items.begin()[i];
    }
  }

  // Данный фрагмент кода определяет явный конструктор копирования класса `array`, 
  // который принимает в качестве параметра другой объект класса `array`
  // Ключевое слово `explicit` указывает на явное использование конструктора, то 
  // есть он должен быть вызван явно при создании объекта, а не неявно при передаче аргументов 
  // функции
  explicit array(const array &a) {
  // Цикл используется для копирования элементов массива `a` в массив `data_` текущего объекта.
  // Цикл идет до `V`, что гарантирует, что все элементы массива будут скопированы. Копирование 
  // происходит по индексу `i`, используя оператор доступа по индексу `[]`
    for (size_type i = 0; i < V; ++i) {
      data_[i] = a[i];
    }
  }

  // Данный фрагмент кода определяет явный конструктор копирования класса `array`, 
  // который принимает в качестве параметра другой объект класса `array`
  // Ключевое слово `explicit` указывает на явное использование конструктора, то 
  // есть он должен быть вызван явно при создании объекта, а не неявно при передаче аргументов 
  // функции
  // Конструктор имеет спецификатор `noexcept`, который указывает на то, что он не может 
  // генерировать исключения во время его выполнения.
  explicit array(array &&a) noexcept {
  // Цикл используется для перемещения элементов массива `a` в массив `data_` текущего объекта. 
  // Цикл проходится по каждому элементу `item` массива `a` и перемещает его в массив `data_` 
  // с помощью функции `std::move()`. После копирования указатель `iter` на объект массива `data_` 
  // инкрементируется, чтобы указать на следующий элемент массива.
    auto iter = data_;
    for (auto &item : a) {
      *(iter++) = std::move(item);
    }
  }

  // Данный фрагмент кода определяет оператор присваивания с перемещением для класса `array`. Он 
  // принимает объект `a` класса `array` через ссылку на rvalue и возвращает ссылку на текущий объект.
  // Ключевое слово `noexcept` указывает на то, что оператор присваивания не может генерировать 
  // исключения во время выполнения.
  array &operator=(array &&a) noexcept {
  // Цикл используется для перемещения элементов массива `a` в массив `data_` текущего объекта. 
  // Цикл проходится по каждому элементу массива `a` и перемещает его в массив `data_` с помощью
  // функции `std::move()`
    for (size_type i = 0; i < V; ++i) {
      data_[i] = std::move(a[i]);
    }
    return *this;
  }

  // Данная строка является объявлением деструктора по умолчанию для класса `array`
  // Ключевое слово `default` указывает на то, что компилятор должен сгенерировать деструктор 
  // класса по умолчанию, то есть он должен освободить память, занятую объектом класса, и вызвать 
  // деструкторы для его членов, если они есть. 
  // Здесь также используется инициализация по умолчанию для деструктора (`~array() = default;`)
  ~array() = default;

  // Данный фрагмент кода определяет функцию чтения элемента массива с использованием проверки 
  // индекса на выход за границы.

  // Функция принимает индекс (pos) типа size_type и возвращает ссылку на элемент массива типа T, 
  // расположенный по указанному индексу.
  reference at(size_type pos) {
    // Первая строка проверяет, что индекс не выходит за границы массива. Если выходит, 
    // то генерируется исключение типа std::out_of_range с сообщением "Out of range".
    if (pos >= V) {
      throw std::out_of_range("Out of range");
    }
    // Затем функция возвращает ссылку на элемент массива по указанному индексу. 
    // Если элемент находится вне допустимых границ, возможно нарушение инвариантов объекта, 
    // что приведет к неопределенному поведению программы.
    return data_[pos];
  }


  // Данный фрагмент кода определяет оператор доступа по индексу для класса `array`. 
  // Оператор принимает индекс (pos) типа size_type и возвращает ссылку на элемент 
  // массива типа T, расположенный по указанному индексу.
  // Ключевое слово `constexpr` указывает на то, что оператор может быть вычислен на 
  // этапе компиляции, если его аргументы также вычисляются на этапе компиляции. 
  // Оператор просто возвращает ссылку на элемент массива `data_` с помощью оператора 
  // доступа к элементу массива `[]`. Если индекс находится за пределами диапазона массива, 
  // то поведение программы станет неопределенным.
  constexpr reference operator[](size_type pos) { return data_[pos]; }

  // Данный фрагмент кода определяет константный оператор доступа по индексу для класса `array`. 
  // Оператор принимает индекс (pos) типа size_type и возвращает константную ссылку на элемент 
  // массива типа T, расположенный по указанному индексу.
  // Ключевое слово `constexpr` указывает на то, что оператор может быть вычислен на 
  // этапе компиляции, если его аргументы также вычисляются на этапе компиляции.
  // Ключевое слово `const` указывает на то, что оператор не будет изменять состояние 
  // объекта класса, для которого он вызывается.
  // Оператор просто возвращает константную ссылку на элемент массива по указанному индексу. 
  // Если индекс находится за пределами диапазона массива, то поведение программы станет неопределенным.
  constexpr const_reference operator[](size_type pos) const { return data_[pos]; }

  // Объявление константного метода класса "array" с именем "front",
  // который возвращает константную ссылку на первый элемент массива "data_"
  // Ключевое слово "constexpr" явно указывает, что данный метод может быть вычислен во время компиляции.
  // Возвращение константной ссылки на первый элемент массива "data_" при помощи операции разыменования указателя "*data_"
  constexpr const_reference front() const { return *data_; }


  // Объявление константного метода класса "array" с именем "back",
  // который возвращает константную ссылку на последний элемент массива "data_"
  // Ключевое слово "constexpr" явно указывает, что данный метод может быть вычислен во время компиляции.
  // Возвращение константной ссылки на последний элемент массива "data_" при помощи индексации массива "data_"
  // Значение индекса равно размеру массива минус один (последний элемент имеет индекс V-1)
  constexpr const_reference back() const { return data_[V - 1]; }

  // Данный фрагмент кода определяет константный метод класса `array`, который возвращает указатель 
  // на первый элемент массива.
  // Ключевое слово `constexpr` указывает на то, что метод может быть вычислен на этапе компиляции, 
  // если его аргументы являются константными выражениями
  // Ключевое слово `iterator` обозначает тип, который позволяет перебирать элементы массива. Если 
  // изменить данные элемента, на который ссылается итератор, то изменения отразятся на самом массиве
  // Ключевое слово `noexcept` указывает на то, что метод не может генерировать исключения во время его выполнения
  // Метод возвращает указатель на начало массива `data_`, который хранится в приватной секции класса
  constexpr iterator data() noexcept { return data_; }

  // Данный фрагмент кода определяет константный метод класса `array`, который возвращает итератор, 
  // указывающий на начало массива.
  // Ключевое слово `constexpr` указывает на то, что метод может быть вычислен на этапе компиляции, 
  // если его аргументы являются константными выражениями.
  // Ключевое слово `iterator` обозначает тип, который позволяет перебирать элементы массива. 
  // Если изменить данные элемента, на который ссылается итератор, то изменения отразятся на самом массиве.
  // Ключевое слово `begin()` является частью итераторного интерфейса и возвращает итератор, указывающий на начало массива.
  // Ключевое слово `noexcept` указывает на то, что метод не может генерировать исключения во время выполнения.
  // В данном коде метод просто возвращает указатель на начало массива `data_`, который хранится в приватной секции класса.
  constexpr iterator begin() noexcept { return data_; }

  // Данный код определяет метод класса `array`, который возвращает итератор, указывающий на элемент "за последним" в массиве.
  // Ключевое слово `constexpr` указывает на то, что метод может быть вычислен на этапе компиляции, если его аргументы 
  // являются константными выражениями.
  // Ключевое слово `iterator` обозначает тип, который позволяет перебирать элементы массива. Если изменить данные 
  // элемента, на который ссылается итератор, то изменения отразятся на самом массиве.
  // Ключевое слово `end()` является частью итераторного интерфейса и возвращает итератор, указывающий на 
  // элемент "за последним" в массиве.
  // Ключевое слово `noexcept` указывает на то, что метод не может генерировать исключения во время его выполнения.
  // Метод возвращает указатель на элемент "за последним" в массиве - это адрес памяти, полученный путем добавления 
  // размера массива V к началу массива data_. Полученный итератор, указывающий на элемент "за последним" в массиве, 
  // может использоваться для итерации по массиву в цикле.
  constexpr iterator end() noexcept { return data_ + V; }

  // Данный код определяет функцию-член empty() для некоторого типа или класса. Функция возвращает логическое значение 
  // true, если переменная V (которое скорее всего является размером или количеством элементов) равна 0, и false в противном случае. 
  // Спецификатор constexpr означает, что результат вычисления этой функции является константой времени компиляции и может 
  // использоваться в качестве аргументов для других выражений
  // Спецификатор noexcept указывает на то, что функция не будет выбрасывать исключения 
  // (если такое происходит, программа завершится аварийно)
  constexpr bool empty() const noexcept { return V == 0; }

  // Это метод-член класса, который также возвращает значение. Он возвращает значение поля V, которое скорее всего 
  // представляет собой размер или количество элементов
  // Спецификатор constexpr означает, что результат вычисления этой функции является константой времени компиляции 
  // и может использоваться в качестве аргументов для других выражений
  // Спецификатор noexcept указывает на то, что функция не будет выбрасывать исключения 
  // (если такое происходит, программа завершится аварийно).
  // Таким образом, этот метод-член просто возвращает значение поля V, предоставляя информацию
  // о размере или количестве элементов объекта.
  constexpr size_type size() const noexcept { return V; }

  // Данный код задает метод класса, который также возвращает значение типа size_type. Он называется max_size() 
  // и используется для получения максимального размера, который может быть выделен для данного класса.
  // Так как данный класс параметризован посредством шаблонного параметра V, который указывает размер объекта, 
  // мы можем утверждать, что максимальный размер объекта всегда равен V
  // Спецификатор constexpr указывает на то, что этот метод может быть вычислен во время компиляции, что может 
  // быть полезно в контексте некоторых приложений, так как это позволяет избегать издержек на запуск программы
  // Спецификатор noexcept указывает на то, что данный метод не будет выбрасывать исключения, что может быть полезно 
  // в некоторых критических системах, где нужна гарантия безопасности работы кода.
  constexpr size_type max_size() const noexcept { return V; }

  // Функция обменивает элементы текущего массива с элементами другого массива, переданного в качестве аргумента.
  // constexpr - спецификатор, указывающий на то, что функция может быть вычислена на этапе компиляции;
  // &other - ссылка на объект класса array, с которым необходимо обменять элементы текущего массива;
  // noexcept - спецификатор, указывающий на то, что функция не выбрасывает исключения;
  // for (size_type i = 0; i < V; ++i) - цикл for, который перебирает все элементы текущего массива. 
  // size_type - это тип данных, который используется для представления размеров массивов, V - это размер текущего массива;
  // std::swap(data_[i], other.data_[i]) - функция swap() из пространства имён std, которая обменивает 
  // значения элементов текущего массива и другого массива. 
  // data_ - это указатель на начало текущего массива,
  // other.data_ - указатель на начало другого массива.
  constexpr void swap(array &other) noexcept {
    for (size_type i = 0; i < V; ++i) {
      std::swap(data_[i], other.data_[i]);
    }
  }

  // Это метод-член класса, который не возвращает значения, но принимает на вход константную ссылку 
  // на значение типа const_reference
  // Функция присваивает всем элементам массива одно и то же значение, которое передается в качестве аргумента
  // В данном случае, это значит, что мы передаем значение, которое мы не можем изменить, 
  // и по которому мы можем только читать данные
  void fill(const_reference value) {
    for (auto &item : data_) {
      item = value;
    }
  }
};

}  // namespace s21

#endif  // CONTAINERS_S21_ARRAY_H